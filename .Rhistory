death_data <- read_excel("data_raw/death_data.xlsx",
sheet = "Weekly excesses", col_names = FALSE,
skip = 1, n_max = 2)
#View(death_data)
death_data2 <- data.frame(t(death_data[-1]))
colnames(death_data2) <- death_data[ , 1]
colnames(death_data2) <- c("excess_death_totals", "location")
excess_deaths_RSA <- filter(death_data2, location == "RSA")
excess_deaths_prov <- filter(death_data2, location == "KZN" | location == "EC" |
location == "GP" | location == "WC" | location == "LP" |
location == "MP" | location == "FS" | location == "NW" | location == "NC")
excess_deaths_metro <- filter(death_data2, location == "BUF" | location == "CPT" |
location == "EKU" | location == "ETH" | location == "JHN" |
location == "MAN" | location == "NMA" | location == "TSH")
owid_setZA <- filter(owid_covid_data, location == "South Africa")
south_africa_data <- owid_setZA %>% slice(28: n())
south_africa_data <- arrange(south_africa_data, desc(date))
south_africa_data_refined <- select(south_africa_data, date, reproduction_rate)
sa_hospital_data_refined <- select(hospital_data, date, current_num_in_hospital)
new_daily_confirmed_case_data <- filter(owid_covid_data, location == "World" | location == "Europe" |
location == "North America" | location == "South America" |
location == "Asia" | location == "Africa" | location == "Oceania")
#convert dates from char format to date format
provincerecCSV$date <- dmy(provincerecCSV$date)
provincedeathCSV$date <- dmy(provincedeathCSV$date)
provincecasesCSV$date <- dmy(provincecasesCSV$date)
owid_setZA$date <- ymd(owid_setZA$date)
vaccinations$date <- ymd(vaccinations$date)
# Plot line graph
new_daily_confirmed_case_data
# Plot line graph
new_daily_confirmed_case_data
ggplot(new_daily_confirmed_case_data, mapping =
aes(x = round_date(parse_date_time(date, "Y%/m%/d%"), unit = "day"),
y = new_cases,
group = location)) +
geom_line(aes(colour = location)) +
ggtitle("New Daily Confirmed Covid-19 Cases: 7-Day Average") +
xlab("") +
ylab("") +
coord_cartesian(ylim = c(0,1000000))
# Plot line graph
new_daily_confirmed_case_data
ggplot(new_daily_confirmed_case_data, mapping =
aes(x = round_date(parse_date_time(date, "Y%/m%/d%"), unit = "week"),
y = new_cases,
group = location)) +
geom_line(aes(colour = location)) +
ggtitle("New Daily Confirmed Covid-19 Cases: 7-Day Average") +
xlab("") +
ylab("") +
coord_cartesian(ylim = c(0,1000000))
# Plot line graph
new_daily_confirmed_case_data
ggplot(new_daily_confirmed_case_data, mapping =
aes(x = round_date(parse_date_time(date, "Y%/m%/d%"), unit = "week"),
y = new_cases_smoothed,
group = location)) +
geom_line(aes(colour = location)) +
ggtitle("New Daily Confirmed Covid-19 Cases: 7-Day Average") +
xlab("") +
ylab("") +
coord_cartesian(ylim = c(0,1000000))
# Plot line graph
new_daily_confirmed_case_data
ggplot(new_daily_confirmed_case_data, mapping =
aes(x = round_date(parse_date_time(date, "Y%/m%/d%"), unit = "day"),
y = new_cases_smoothed,
group = location)) +
geom_line(aes(colour = location)) +
ggtitle("New Daily Confirmed Covid-19 Cases: 7-Day Average") +
xlab("") +
ylab("") +
coord_cartesian(ylim = c(0,1000000))
# Get the last row in data frame and store it in df
df <-
provincedeathCSV %>%
slice(n())
# Convert data.frame into data.table by reference
setDT(df,keep.rownames = T)[]
# Transform data into a separate column
temp <-
stack(df)
# Remove unwanted rows
temp <-
temp[-c(1,2,12, 13,14), ,drop = F]
# Rename column names
colnames(temp) <-
c("death_totals", "prov_code")
# Join data frames: excess_deaths_prov & temp and store it in joined_df
joined_df <-
merge(excess_deaths_prov, temp, by.x = "location",
by.y = "prov_code", all.x = TRUE, all.y = TRUE)
# Plot bar charts stacked on top of each other
ggplot(joined_df, mapping = aes(x = reorder(location, desc(as.numeric(excess_death_totals))), y = round(as.numeric(excess_death_totals)), digits = 2)) +
geom_col(fill = "blue") +
geom_col(joined_df, mapping = aes(y = as.numeric(death_totals)), fill = "red") +
geom_text(aes(label = round(as.numeric(excess_death_totals)), vjust = -0.5, hjust = 0.5)) +
ggtitle("Excess Deaths (Provinces)") +
xlab("") +
ylab("") +
coord_cartesian(ylim = c(0,45000))
# Plot a point chart
ggplot(data = south_africa_data_refined, mapping =
aes(x = round_date(parse_date_time(date, "Y%/m%/d%"), unit = "day"), y = reproduction_rate,
group = 1)) +
geom_point(aes(colour = "red"), show.legend = F, position = position_dodge()) +
geom_ribbon(span = 0.1, colour = "red") +
ggtitle("Current Rt Estimates for South Africa") +
xlab("") +
ylab("")
# Plot a point chart
ggplot(data = south_africa_data_refined, mapping =
aes(x = round_date(parse_date_time(date, "Y%/m%/d%"), unit = "day"), y = reproduction_rate,
group = 1)) +
geom_point(aes(colour = "red"), show.legend = F, position = position_dodge()) +
geom_ribbon(aes(ymin = reproduction_rate - 1, ymax = reproduction_rate + 1), fill = "grey70") +
ggtitle("Current Rt Estimates for South Africa") +
xlab("") +
ylab("")
# Plot a point chart
ggplot(data = south_africa_data_refined, mapping =
aes(x = round_date(parse_date_time(date, "Y%/m%/d%"), unit = "day"), y = reproduction_rate,
group = 1)) +
geom_point(aes(colour = "red"), show.legend = F, position = position_dodge()) +
geom_ribbon(aes(ymin = reproduction_rate - 0.5, ymax = reproduction_rate + 0.5), fill = "grey70") +
ggtitle("Current Rt Estimates for South Africa") +
xlab("") +
ylab("")
# Plot a point chart
ggplot(data = south_africa_data_refined, mapping =
aes(x = round_date(parse_date_time(date, "Y%/m%/d%"), unit = "day"), y = reproduction_rate,
group = 1)) +
geom_point(aes(colour = "red"), show.legend = F, position = position_dodge()) +
geom_ribbon(aes(ymin = reproduction_rate - 0.1, ymax = reproduction_rate + 0.1), color = "grey70") +
ggtitle("Current Rt Estimates for South Africa") +
xlab("") +
ylab("")
# Plot a point chart
ggplot(data = south_africa_data_refined, mapping =
aes(x = round_date(parse_date_time(date, "Y%/m%/d%"), unit = "day"), y = reproduction_rate,
group = 1)) +
geom_point(aes(colour = "red"), show.legend = F, position = position_dodge()) +
geom_ribbon(aes(ymin = reproduction_rate - 0.1, ymax = reproduction_rate + 0.1), fill = "grey70") +
ggtitle("Current Rt Estimates for South Africa") +
xlab("") +
ylab("")
# Plot a point chart
ggplot(data = south_africa_data_refined, mapping =
aes(x = round_date(parse_date_time(date, "Y%/m%/d%"), unit = "day"), y = reproduction_rate,
group = 1)) +
geom_ribbon(aes(ymin = reproduction_rate - 0.1, ymax = reproduction_rate + 0.1), fill = "grey70") +
geom_point(aes(colour = "red"), show.legend = F, position = position_dodge()) +
ggtitle("Current Rt Estimates for South Africa") +
xlab("") +
ylab("")
# Plot point chart
ggplot(data = south_africa_data, mapping = aes(x = round_date(parse_date_time(date, "Y%/m%/d%"), unit = "day"), y = new_tests_smoothed), size = new_cases_smoothed) +
geom_point(aes(size = new_cases_smoothed), col = "tomato3", alpha = 0.7, show.legend = F) +
xlab("") +
ylab("Number of Tests per Day") +
scale_radius() +
ggtitle("Daily Tests and Positive Cases")
owid_covid_data <- read.csv("https://covid.ourworldindata.org/data/owid-covid-data.csv")
# Plot line graph
new_daily_confirmed_case_data
ggplot(new_daily_confirmed_case_data, mapping =
aes(x = round_date(parse_date_time(date, "Y%/m%/d%"), unit = "day"),
y = new_cases_smoothed,
group = location)) +
geom_line(aes(colour = location)) +
ggtitle("New Daily Confirmed Covid-19 Cases: 7-Day Average") +
xlab("") +
ylab("") +
coord_cartesian(ylim = c(0,1000000))
#Calculate 7 day average
owid_setZA <-
owid_setZA %>%
arrange(desc(date)) %>%
mutate(count_7da = rollmean(new_cases, k = 7, fill = NA)) %>%
ungroup()
#plot
daily_cases <-
ggplot() +
geom_bar(data = owid_setZA, aes(date, new_cases),
stat = "identity",
width = 0.4,
color = "grey50"
) +
geom_line(data = owid_setZA, aes(date, count_7da),
color="red",
size = 1) +
scale_y_continuous(labels = comma,
breaks = breaks_width(10000)) +
scale_x_date(date_labels = "%d %b",
date_breaks = "1 month") +
labs(x="", y="") +
theme(axis.ticks = element_blank()) +
geom_rect(data = lckdwn,
aes(xmin = dateStart,
xmax = dateEnd,
fill = level),
ymin = 0,
ymax = 100000,
alpha = 0.15,
show.legend = FALSE) +
scale_fill_manual(values = c("Level 1" = "lightgreen", "Level 2" = "yellow2", "Level 3" = "orange", "Level 4" = "orangered", "Level 5" = "red"))
#Calculate 7 day average
owid_setZA <-
owid_setZA %>%
arrange(desc(date)) %>%
mutate(count_7da = rollmean(new_cases, k = 7, fill = NA)) %>%
ungroup()
#plot
daily_cases <-
ggplot() +
geom_bar(data = owid_setZA, aes(date, new_cases),
stat = "identity",
width = 0.4,
color = "grey50"
) +
geom_line(data = owid_setZA, aes(date, count_7da),
color="red",
size = 1) +
scale_y_continuous(labels = comma,
breaks = breaks_width(10000)) +
scale_x_date(date_labels = "%d %b",
date_breaks = "1 month") +
labs(x="", y="") +
theme(axis.ticks = element_blank()) +
geom_rect(data = lckdwn,
aes(xmin = dateStart,
xmax = dateEnd,
fill = level),
ymin = 0,
ymax = 100000,
alpha = 0.15,
show.legend = FALSE) +
scale_fill_manual(values = c("Level 1" = "lightgreen", "Level 2" = "yellow2", "Level 3" = "orange", "Level 4" = "orangered", "Level 5" = "red"))
#Create dataframe for lockdown levels
lckdwn <- data.frame(
dateStart = dmy(c("26 March 2020",
"1 May 2020",
"1 June 2020",
"18 August 2020",
"21 September 2020",
"29 December 2020",
"1 March 2021",
"31 May 2021",
"16 June 2021",
"28 June 2021")),
dateEnd = dmy(c("30 April 2020",
"31 May 2020",
"17 August 2020",
"20 September 2020",
"28 December 2020",
"28 February 2021",
"30 May 2021",
"15 June 2021",
"27 June 2021",
"11 July 2021")),
level = c("Level 5",
"Level 4",
"Level 3",
"Level 2",
"Level 1",
"Level 3",
"Level 1",
"Level 2",
"Level 3",
"Level 4"))
#Calculate 7 day average
owid_setZA <-
owid_setZA %>%
arrange(desc(date)) %>%
mutate(count_7da = rollmean(new_cases, k = 7, fill = NA)) %>%
ungroup()
#plot
daily_cases <-
ggplot() +
geom_bar(data = owid_setZA, aes(date, new_cases),
stat = "identity",
width = 0.4,
color = "grey50"
) +
geom_line(data = owid_setZA, aes(date, count_7da),
color="red",
size = 1) +
scale_y_continuous(labels = comma,
breaks = breaks_width(10000)) +
scale_x_date(date_labels = "%d %b",
date_breaks = "1 month") +
labs(x="", y="") +
theme(axis.ticks = element_blank()) +
geom_rect(data = lckdwn,
aes(xmin = dateStart,
xmax = dateEnd,
fill = level),
ymin = 0,
ymax = 100000,
alpha = 0.15,
show.legend = FALSE) +
scale_fill_manual(values = c("Level 1" = "lightgreen", "Level 2" = "yellow2", "Level 3" = "orange", "Level 4" = "orangered", "Level 5" = "red"))
ggplotly(daily_cases, width = 1000) %>%
layout(title = list(text = paste0('Daily Confirmed Cases',
'<br>',
'<sup>',
'This chart shows the daily confirmed cases since March 2020. The levels refer to the lockdown levels. Red line is the 7-day rolling average.',
'</sup>')))
#Calculate 7 day average
owid_setZA <-
owid_setZA %>%
arrange(desc(date)) %>%
mutate(count_7da = rollmean(new_cases, k = 7, fill = NA)) %>%
ungroup()
#plot
daily_cases <-
ggplot() +
geom_bar(data = owid_setZA, aes(date, new_cases),
stat = "identity",
width = 0.4,
color = "grey50"
) +
geom_line(data = owid_setZA, aes(date, count_7da),
color="red",
size = 1) +
scale_y_continuous(labels = comma,
breaks = breaks_width(10000)) +
scale_x_date(date_labels = "%d %b",
date_breaks = "1 month") +
labs(title = "Daily Confirmed Cases", x="", y="") +
theme(axis.ticks = element_blank()) +
geom_rect(data = lckdwn,
aes(xmin = dateStart,
xmax = dateEnd,
fill = level),
ymin = 0,
ymax = 100000,
alpha = 0.15,
show.legend = FALSE) +
scale_fill_manual(values = c("Level 1" = "lightgreen", "Level 2" = "yellow2", "Level 3" = "orange", "Level 4" = "orangered", "Level 5" = "red"))
ggplotly(daily_cases, width = 1000) %>%
layout(title = list(text = paste0('<br>',
'<sup>',
'This chart shows the daily confirmed cases since March 2020. The levels refer to the lockdown levels. Red line is the 7-day rolling average.',
'</sup>')))
#Calculate 7 day average
owid_setZA <-
owid_setZA %>%
arrange(desc(date)) %>%
mutate(count_7da = rollmean(new_cases, k = 7, fill = NA)) %>%
ungroup()
#plot
daily_cases <-
ggplot() +
geom_bar(data = owid_setZA, aes(date, new_cases),
stat = "identity",
width = 0.4,
color = "grey50"
) +
geom_line(data = owid_setZA, aes(date, count_7da),
color="red",
size = 1) +
scale_y_continuous(labels = comma,
breaks = breaks_width(10000)) +
scale_x_date(date_labels = "%d %b",
date_breaks = "1 month") +
labs(title = "Daily Confirmed Cases", x="", y="") +
theme(axis.ticks = element_blank()) +
geom_rect(data = lckdwn,
aes(xmin = dateStart,
xmax = dateEnd,
fill = level),
ymin = 0,
ymax = 100000,
alpha = 0.15,
show.legend = FALSE) +
scale_fill_manual(values = c("Level 1" = "lightgreen", "Level 2" = "yellow2", "Level 3" = "orange", "Level 4" = "orangered", "Level 5" = "red"))
ggplotly(daily_cases, width = 1000) %>%
layout(title = list(text = paste0('Daily Confirmed Cases',
'<br>',
'<br>',
'<sup>',
'This chart shows the daily confirmed cases since March 2020. The levels refer to the lockdown levels. Red line is the 7-day rolling average.',
'</sup>')))
# Prepare and calculate data for the creation of the plotly table
df <-
tests %>%
slice(n()-1)
latest_daily_report <-
tests %>%
slice(n())
total_tests_var <-
latest_daily_report$cumulative_tests
total_tests_var_percent <-
"100 (%)"
total_public_tests_var <-
latest_daily_report$cumulative_tests_public
total_public_tests_var_percent <-
round((total_public_tests_var/total_tests_var) * 100, 2)
total_private_tests_var <-
latest_daily_report$cumulative_tests_private
total_private_tests_var_percent <-
round((total_private_tests_var/total_tests_var) * 100, 2)
new_public_tests_var <-
latest_daily_report$cumulative_tests_public
- df$cumulative_tests_public
new_private_tests_var <-
latest_daily_report$cumulative_tests_private
- df$cumulative_tests_private
total_new_tests_var <-
new_public_tests_var + new_private_tests_var
new_public_tests_var_percent <-
round((new_public_tests_var/total_new_tests_var) * 100, 2)
new_private_tests_var_percent <-
round((new_private_tests_var/total_new_tests_var) * 100, 2)
tab <-
matrix(c(total_tests_var,total_tests_var_percent,total_public_tests_var, total_public_tests_var_percent, total_private_tests_var, total_private_tests_var_percent, new_public_tests_var, new_public_tests_var_percent, new_private_tests_var, new_private_tests_var_percent), ncol=2, byrow=TRUE)
rownames(tab) <-
c('Total Tests','Total Public Tests','Total Private Tests',
'New Public Tests', 'New Private Tests')
tab <-
as.table(tab)
public_vs_private_table <-
as.data.frame.matrix(tab)
# Create a plotly table for public_vs_private_table list
pvp <-
plot_ly(
width = 1000,
type = 'table',
header = list(
values = c("<b>Public vs. Private Tests</b>", names(public_vs_private_table)),
align = c('left', rep('center', ncol(public_vs_private_table))),
line = list(width = 1, color = 'black'),
fill = list(color = 'rgb(0, 165, 219)'),
font = list(family = "Arial", size = 14, color = "white")
),
cells = list(
values = rbind(
rownames(public_vs_private_table),
t(as.matrix(unname(public_vs_private_table)))
),
align = c('left', rep('center', ncol(public_vs_private_table))),
line = list(color = "black", width = 1),
fill = list(color = c('rgb(0, 220, 219)', 'rgba(228, 222, 249, 0.65)')),
font = list(family = "Arial", size = 12, color = c("black"))
))
pvp
# Prepare and calculate data for the creation of the plotly table
df <-
tests %>%
slice(n()-1)
latest_daily_report <-
tests %>%
slice(n())
total_tests_var <-
latest_daily_report$cumulative_tests
total_tests_var_percent <-
"100 (%)"
total_public_tests_var <-
latest_daily_report$cumulative_tests_public
total_public_tests_var_percent <-
round((total_public_tests_var/total_tests_var) * 100, 2)
total_private_tests_var <-
latest_daily_report$cumulative_tests_private
total_private_tests_var_percent <-
round((total_private_tests_var/total_tests_var) * 100, 2)
new_public_tests_var <-
latest_daily_report$cumulative_tests_public
- df$cumulative_tests_public
new_private_tests_var <-
latest_daily_report$cumulative_tests_private
- df$cumulative_tests_private
total_new_tests_var <-
new_public_tests_var + new_private_tests_var
new_public_tests_var_percent <-
round((new_public_tests_var/total_new_tests_var) * 100, 2)
new_private_tests_var_percent <-
round((new_private_tests_var/total_new_tests_var) * 100, 2)
tab <-
matrix(c(total_tests_var,total_tests_var_percent,total_public_tests_var, total_public_tests_var_percent, total_private_tests_var, total_private_tests_var_percent, new_public_tests_var, new_public_tests_var_percent, new_private_tests_var, new_private_tests_var_percent), ncol=2, byrow=TRUE)
rownames(tab) <-
c('Total Tests','Total Public Tests','Total Private Tests',
'New Public Tests', 'New Private Tests')
tab <-
as.table(tab)
public_vs_private_table <-
as.data.frame.matrix(tab)
# Create a plotly table for public_vs_private_table list
pvp <-
plot_ly(
width = 1000,
height = 500,
type = 'table',
header = list(
values = c("<b>Public vs. Private Tests</b>", names(public_vs_private_table)),
align = c('left', rep('center', ncol(public_vs_private_table))),
line = list(width = 1, color = 'black'),
fill = list(color = 'rgb(0, 165, 219)'),
font = list(family = "Arial", size = 14, color = "white")
),
cells = list(
values = rbind(
rownames(public_vs_private_table),
t(as.matrix(unname(public_vs_private_table)))
),
align = c('left', rep('center', ncol(public_vs_private_table))),
line = list(color = "black", width = 1),
fill = list(color = c('rgb(0, 220, 219)', 'rgba(228, 222, 249, 0.65)')),
font = list(family = "Arial", size = 12, color = c("black"))
))
pvp
